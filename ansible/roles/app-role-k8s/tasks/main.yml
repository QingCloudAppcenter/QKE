---
- name: install confd files
  include_role:
    name: confd-files-1.0.9

- name: copy binaries
  copy:
    src: "{{ role_path }}/files/opt/app/"
    dest: /opt/app/
    owner: root
    group: svc
    mode: preserve
    directory_mode: u=rwx,g=rx,o=

- apt_repository:
    repo: ppa:gluster/glusterfs-3.12

- name: install storage clients
  apt:
    name: [ 'nfs-common', 'ceph-common', 'glusterfs-client' ]
    state: present
    update_cache: yes

- name: download plugins
  include_role:
    name: install-1.0.6
  vars:
    opts:
      dest_path: /opt/app/current/conf/k8s/
      pkg_name: "{{ pkg.name }}"
      pkg_version: "{{ pkg.version | d('stable') }}"
      pkg_url: "{{ pkg.url }}"
      pkg_type: yml
  loop:
  - name: calico
    version: "{{ calico_version }}"
    url: https://docs.projectcalico.org/v{{ calico_version | splitext | first }}/manifests/calico.yaml
  - name: flannel
    version: "{{ flannel_version }}"
    url: https://raw.githubusercontent.com/coreos/flannel/v{{ flannel_version }}/Documentation/kube-flannel.yml
  - name: cloud-controller-manager
    version: "{{ qingcloud_ccm_version }}"
    url: https://raw.githubusercontent.com/yunify/qingcloud-cloud-controller-manager/v{{ qingcloud_ccm_version }}/deploy/kube-cloud-controller-manager.yaml
  - name: ks-installer
    version: "{{ ks_version }}"
    url: https://raw.githubusercontent.com/kubesphere/ks-installer/v{{ ks_version }}/deploy/kubesphere-installer.yaml
  - name: ks-config
    version: "{{ ks_version }}"
    url: https://raw.githubusercontent.com/kubesphere/ks-installer/v{{ ks_version }}/deploy/cluster-configuration.yaml
  - name: nodelocaldns
    version: "{{ k8s_version }}"
    url: https://raw.githubusercontent.com/kubernetes/kubernetes/v{{ k8s_version }}/cluster/addons/dns/nodelocaldns/nodelocaldns.yaml
  - name: nvidia-plugin
    version: "{{ nvidia_plugin_version }}"
    url: https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/{{ nvidia_plugin_version }}/nvidia-device-plugin.yml
  - name: hostnic
    version: "{{ hostnic_version }}"
    url: https://raw.githubusercontent.com/yunify/hostnic-cni/{{ hostnic_version }}/deploy/hostnic.yaml
  - name: hostnic-policy
    version: "{{ hostnic_version }}"
    url: https://raw.githubusercontent.com/yunify/hostnic-cni/{{ hostnic_version }}/policy/calico.yaml
  loop_control:
    loop_var: pkg

- name: download csi plugin
  include_role:
    name: install-1.0.6
  vars:
    opts:
      dest_path: /opt/app/current/conf/k8s/
      pkg_name: "{{ pkg.name }}"
      pkg_version: "{{ pkg.version | d('stable') }}"
      pkg_url: "{{ pkg.url }}"
      pkg_type: tgz
  loop:
  - name: csi-qingcloud
    version: "{{ qingcloud_csi_version }}"
    url: https://charts.kubesphere.io/test/csi-qingcloud-{{ qingcloud_csi_version }}.tgz
  loop_control:
    loop_var: pkg

- name: align calico with offline image version
  replace:
    path: /opt/app/current/conf/k8s/calico-{{ calico_version }}.yml
    regexp: '(image:\scalico/[^:]+).+$'
    replace: '\1:v{{ calico_version }}'

- name: align calico with k8s 1.16 api
  replace:
    path: /opt/app/current/conf/k8s/calico-{{ calico_version }}.yml
    regexp: 'extensions/v1beta1'
    replace: apps/v1

- name: align flannel with offline image version
  replace:
    path: /opt/app/current/conf/k8s/flannel-{{ flannel_version }}.yml
    regexp: '(image:\squay.io/coreos/flannel:v{{ flannel_version }}-amd64)'
    replace: 'image: kubesphere/flannel:v{{ flannel_version }}'

- name: align image version with ks offline images
  replace:
    path: /opt/app/current/conf/k8s/{{ yml_file.path }}
    regexp: '(image:\s[^:]+).+$'
    replace: '\1:{{ yml_file.tag }}'
  loop:
  - path: nodelocaldns-{{ k8s_version }}.yml
    tag: "{{ nodelocaldns_version }}"
  loop_control:
    loop_var: yml_file

- name: align image repo with ks offline images
  replace:
    path: /opt/app/current/conf/k8s/{{ yml_file }}
    regexp: '(image:)\sk8s.gcr.io/'
    replace: '\1 {{ gcr_mirror }}/'
  loop:
  - nodelocaldns-{{ k8s_version }}.yml
  loop_control:
    loop_var: yml_file

- name: align image repo and tag
  replace:
    path: /opt/app/current/conf/k8s/{{ yml_file }}
    regexp: '(image:\s[^:]*):[^:]*$'
    replace: '\1:{{ ks_installer_image_tag }}'
  loop:
  - ks-installer-{{ ks_version }}.yml
  loop_control:
    loop_var: yml_file

- name: change image pull policy
  replace:
    path: /opt/app/current/conf/k8s/{{ yml_file }}
    regexp: '(imagePullPolicy:).*$'
    replace: '\1 IfNotPresent'
  loop:
  - ks-installer-{{ ks_version }}.yml
  - ks-config-{{ ks_version }}.yml
  loop_control:
    loop_var: yml_file

- name: align image repo and tag
  replace:
    path: /opt/app/current/conf/k8s/{{ yml_file }}
    regexp: '(image:\s)docker.io/([^:]*):.*$'
    replace: '\1\2:v{{ calico_version }}'
  loop:
  - hostnic-policy-{{ hostnic_version }}.yml
  loop_control:
    loop_var: yml_file

- name: install calicoctl
  include_role:
    name: install-1.0.6
  vars:
    opts:
      file_mode: '755'
      pkg_name: calicoctl
      pkg_version: "{{ calico_version }}"
      pkg_type: ''
      pkg_url: https://github.com/projectcalico/calicoctl/releases/download/v{{ calico_version }}/calicoctl-linux-amd64
      bin_links:
      - src: calicoctl-{{ calico_version }}
        dest: /usr/bin/calicoctl

- name: set up k8s env
  copy:
    dest: /opt/app/current/bin/envs/confd.env
    content: |
      GCR_MIRROR={{ gcr_mirror }}
      K8S_VERSION={{ k8s_version }}
      CALICO_VERSION={{ calico_version }}
      FLANNEL_VERSION={{ flannel_version }}
      HOSTNIC_VERSION={{ hostnic_version }}
      KS_VERSION={{ ks_version }}
      COREDNS_VERSION={{ coredns_version }}
      HELM_VERSION={{ helm_version }}
      NVIDIA_PLUGIN_VERSION={{ nvidia_plugin_version }}
      QINGCLOUD_CCM_VERSION={{ qingcloud_ccm_version }}
      QINGCLOUD_CSI_VERSION={{ qingcloud_csi_version }}
      APISERVER_LB_FILE=/data/appctl/data/apiserver-lb
      JOIN_CMD_FILE=/opt/app/current/bin/node/join-cluster.sh
      KUBE_CONFIG=/data/kubernetes/admin.conf
      KUBELET_KUBE_CONFIG=/data/kubernetes/kubelet.conf
      KUBEADM_CONFIG=/opt/app/current/conf/k8s/kubeadm.conf
      QINGCLOUD_CONFIG=/opt/app/current/conf/qingcloud/config.yaml
      DEFAULT_AUDIT_POLICY_FILE=/etc/kubernetes/audit/policies/default.yaml

- name: remove k8s etc dir
  file:
    path: /etc/kubernetes
    state: absent

- name: load images from localhost
  include_tasks: load-images.yml
  when: target_env != 'dev'

- name: restart docker
  include_tasks: restart-docker.yml
  when: target_env == 'dev'

- name: prepare upgrade snapshot
  vars:
    snapshot_sources:
    - /opt/app
    - /opt/etcd
    - /opt/k8s-node
    - /opt/helm
    - /opt/calicoctl
    - /opt/jq
    - /opt/yq
    - /root/.config
    - /root/.cache
    # 初始化的 helm 暂时没有 ~/.local 路径，做 migrate 时添加上
    - /root/.local
    target_env: "{{ lookup('env', 'target') }}"
  include_role:
    name: app-upgrade
  when: "'k8s-node' in group_names"
