{{- $upgradedFromV1 := gt (len (getvs "/hosts/master/*/token")) 0 }}
{{- $lbIpFromV1 := join (getvs "/hosts/client/*/token") "" }}
{{- $upgradingFromV1 := gt (len (getvs "/upgrade-audit/from_app_version" | filter "(appv-e5ni6ltd|appv-53p2pg79)")) 0 }}
{{- $upgradingFromV2 := gt (len (getvs "/upgrade-audit/from_app_version" | filter "(appv-39iiioy3)")) 0 }}
{{- $extraModules := getvs "/env/extra.modules" }}

buildNodeName() {
  if [[ "$1" =~ ^node_ ]]; then local format="03"; fi
  printf "%s%${format}d" $(echo $1 | sed -r 's/node_(.).*/worker-\1/') $2
}

allNodes="$(sort -V << ALL_NODES_EOF
{{- range $nodeRole := lsdir "/hosts" }}
{{- $joiningNodes := lsdir (printf "/adding-hosts/%s" $nodeRole) }}
{{- $leavingNodes := lsdir (printf "/deleting-hosts/%s" $nodeRole) }}
{{- range $instanceId := lsdir (printf "/hosts/%s" $nodeRole) }}
{{- if $joiningNodes | filter $instanceId }}
joining/
{{- else if $leavingNodes | filter $instanceId }}
leaving/
{{- else }}
stable/
{{- end }}
{{- $nodeRole }}/
{{- $nodeSid := getv (printf "/hosts/%s/%s/sid" $nodeRole $instanceId) }}
{{- $nodeSid }}/
{{- $instanceId }}/$(buildNodeName {{ $nodeRole }} {{ $nodeSid }})/
{{- getv (printf "/hosts/%s/%s/node_id" $nodeRole $instanceId) }}/
{{- getv (printf "/hosts/%s/%s/ip" $nodeRole $instanceId) }}
{{- end }}
{{- end }}
ALL_NODES_EOF
)"
myRole={{ getv "/host/role" }}
mySid={{ getv "/host/sid" }}
myInstanceId={{ getv "/host/instance_id" }}
myNodeName=$(buildNodeName $myRole $mySid)

flush /opt/app/current/bin/envs/node.env << NODE_ENV_EOF
DATA_MOUNTS=/data
NODE_CTL=k8s
CLUSTER_ID={{ getv "/cluster/cluster_id" }}
CLUSTER_TAG={{ join (getvs "/cluster/cluster_tag") "" }}
CLUSTER_VXNET={{ getv "/cluster/vxnet" }}
CLUSTER_ZONE={{ getv "/cluster/zone" }}
CLUSTER_API_SERVER={{ getv "/cluster/api_server/host" "api.qingcloud.com" }}
MY_IP={{ getv "/host/ip" }}
MY_SID=$mySid
MY_ROLE=$myRole
MY_NODE_NAME=$myNodeName
MY_INSTANCE_ID=$myInstanceId
UPGRADED_FROM_V1={{ $upgradedFromV1 }}
LB_IP_FROM_V1={{ $lbIpFromV1 }}
NODE_NAME_HUMAN_READABLE={{ getv "/env/node.name.human.readable" "false" }}
ETCD_PROVIDED="{{ exists "/links/etcd_service/cluster/cluster_id" }}"
ELK_PROVIDED="{{ exists "/links/elk_service/cluster/cluster_id" }}"
SERVICES="\$SERVICES $(xargs <<< "
etcd/{{ and (not (exists "/links/etcd_service/cluster/cluster_id")) (eq (getv "/host/role") "master") }}/http:2379
docker/true/
kubelet/true/tcp:10250{{ if eq (getv "/host/role") "master" }},tcp:6443{{ end }}
kube-certs.timer/{{ eq (getv "/host/role") "master" }}/
docker-prune.timer/true/
")"
STABLE_MASTER_NODES="$(echo "$allNodes" | grep ^stable/m | xargs)"
JOINING_MASTER_NODES="$(echo "$allNodes" | grep ^joining/m | xargs)"
LEAVING_MASTER_NODES="$(echo "$allNodes" | grep ^leaving/m | xargs)"
STABLE_WORKER_NODES="$(echo "$allNodes" | grep stable/n | xargs)"
JOINING_WORKER_NODES="$(echo "$allNodes" | grep ^joining/n | xargs)"
LEAVING_WORKER_NODES="$(echo "$allNodes" | grep ^leaving/n | xargs)"
STABLE_CLIENT_NODES="$(echo "$allNodes" | grep stable/c | xargs)"
JOINING_CLIENT_NODES="$(echo "$allNodes" | grep ^joining/c | xargs)"
IS_HA_CLUSTER={{ gt (len (lsdir "/hosts/master")) 1 }}
DOCKER_PRUNE_DAYS={{ getv "/env/docker_prune_days" "3" }}
DNS_DOMAIN={{ getv "/env/api_external_domain" "cluster.local" }}
KUBE_PROXY_MODE={{ getv "/env/proxy_mode" "ipvs" }}
POD_SUBNET={{ getv "/env/pod_subnet" "10.10.0.0/16" }}
K8S_LOG_LEVEL={{ getv "/env/kube_log_level" "0" }}
NET_PLUGIN={{ getv "/env/network_plugin" "calico" }}
NODELOCALDNS_ENABLED={{ getv "/env/nodelocaldns.enabled" "false" }}
HELM_HISTORY_MAX={{ getv "/env/helm.history.max" "200" }}
KS_ENABLED={{ getv "/env/install_kubesphere" "true" }}
KS_EIP_ID={{ getv "/env/kubesphere_eip" "" }}
IS_UPGRADING_FROM_V1={{ $upgradingFromV1 }}
IS_UPGRADING_FROM_V2={{ $upgradingFromV2 }}
{{- if or $upgradingFromV1 $upgradingFromV2}}
KS_MODULES_COUNT=7
{{- else }}
KS_MODULES_COUNT={{ add 1 (len (split (join $extraModules "") "," | filter "ks-*")) }}
{{- end }}
NODE_ENV_EOF
