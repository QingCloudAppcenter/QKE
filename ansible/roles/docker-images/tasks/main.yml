---
- name: set vars
  set_fact:
    src_data_path: "/root/data"
    local_path: "{{ local_images_path }}"
    all_k8s_images: "{{ docker_images_k8s + docker_images_k8s_new}}"
    all_ks_images: "{{ docker_images_ks + docker_images_ks_new }}"
    docker_config_path: /etc/docker/daemon.json

- name: create data directory if they don't exist
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0775
  loop:
    - "{{ src_data_path }}"

- name: Check that the src_ks_image_package exists
  stat:
    path: "{{ src_data_path }}/{{ ks_images_package }}"
    get_checksum: no
  register: src_ks_result

- name: Check that the src_k8s_image_package exists
  stat:
    get_checksum: no
    path: "{{ src_data_path }}/{{ k8s_images_package }}"
  register: src_k8s_result

- name: Check that the src_ks_image_package exists
  stat:
    get_checksum: no
    path: "{{ src_data_path }}/{{ upgrade_ks_images_package }}"
  register: upgrade_src_ks_result

- name: Check that the src_ks_image_package exists
  stat:
    get_checksum: no
    path: "{{ src_data_path }}/{{ upgrade_k8s_images_package }}"
  register: upgrade_src_k8s_result

- name: Check that the local_ks_image_package exists
  stat:
    get_checksum: no
    path: "{{ local_path }}/{{ ks_images_package }}"
  register: local_ks_result
  delegate_to: localhost

- name: Check that the local_k8s_image_package exists
  stat:
    get_checksum: no
    path: "{{ local_path }}/{{ k8s_images_package }}"
  register: local_k8s_result
  delegate_to: localhost

- name: Check that the local_ks_image_package exists
  stat:
    get_checksum: no
    path: "{{ local_path }}/{{ upgrade_ks_images_package }}"
  register: upgrade_local_ks_result
  delegate_to: localhost

- name: Check that the local_ks_image_package exists
  stat:
    get_checksum: no
    path: "{{ local_path }}/{{ upgrade_k8s_images_package }}"
  register: upgrade_local_k8s_result
  delegate_to: localhost

- name: set image package variable
  set_fact:
    src_exists: "{% if src_k8s_result.stat.exists and src_ks_result.stat.exists and upgrade_src_k8s_result.stat.exists and upgrade_src_ks_result.stat.exists %}True{% else %}False{% endif %}"
    local_exists: "{% if local_k8s_result.stat.exists and local_ks_result.stat.exists and upgrade_local_k8s_result.stat.exists and upgrade_local_ks_result.stat.exists %}True{% else %}False{% endif %}"

- name: update docker daemon.json
  copy:
    dest: "{{ docker_config_path }}"
    content: |
        {
            "registry-mirrors": ["{{ private_registry_url }}"],
            "exec-opts": ["native.cgroupdriver=systemd"],
            "storage-driver": "overlay2"
        }

- name: start docker service
  systemd:
    name: docker
    masked: no
    state: started

- name: install pigz
  apt:
    name: pigz
    state: present

- name: install pip3
  apt:
    name: python3-pip
    update_cache: yes

- name: install docker.py
  pip:
    executable: pip3
    name: docker.py

- name: pull k8s images
  docker_image:
    source: pull
    name: "{{ image_name }}"
  loop:
    "{{ all_k8s_images }}"
  loop_control:
    loop_var: image_name
  when:
  - not src_exists
  - target_env != 'dev'

- name: pull ks images
  docker_image:
    source: pull
    name: "{{ image_name }}"
  loop:
    "{{ all_ks_images }}"
  loop_control:
    loop_var: image_name
  when:
  - not src_exists
  - target_env != 'dev'

- name: prepare images packages
  shell: if ! {{ image_package.file_exists | lower }}; then docker save {{ image_package.images_names | join(" ") }} | pigz --stdout --best > {{ src_data_path }}/{{ image_package.package_name }}; fi
  loop:
    - package_name: "{{ ks_images_package }}"
      images_names: "{{ all_ks_images }}"
      file_exists: "{{ src_ks_result.stat.exists }}"

    - package_name: "{{ k8s_images_package }}"
      images_names: "{{ all_k8s_images }}"
      file_exists: "{{ src_k8s_result.stat.exists }}"

    - package_name: "{{ upgrade_k8s_images_package }}"
      images_names: "{{ docker_images_k8s_new }}"
      file_exists: "{{ upgrade_src_k8s_result.stat.exists }}"

    - package_name: "{{ upgrade_ks_images_package }}"
      images_names: "{{ docker_images_ks_new }}"
      file_exists: "{{ upgrade_src_ks_result.stat.exists }}"
  loop_control:
    loop_var: image_package
  when:
  - not src_exists
  - target_env != 'dev'

- name: stop docker service
  systemd:
    name: docker
    masked: no
    state: stopped

- name: prepare local dir
  file:
    path: "{{ local_path }}"
    state: directory
    owner: root
    group: root
    mode: 0775
  delegate_to: localhost

- name: fetch images
  synchronize:
    src: "{{ src_data_path }}/{{ image_package }}"
    dest: "{{ local_path }}/{{ image_package }}"
    mode: pull
  delegate_to: localhost
  loop:
    - "{{ upgrade_k8s_images_package }}"
    - "{{ upgrade_ks_images_package }}"
    - "{{ ks_images_package }}"
    - "{{ k8s_images_package }}"
  loop_control:
    loop_var: image_package
  when:
  - not src_exists
  - target_env != 'dev'
