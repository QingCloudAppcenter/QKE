
---
- name: set vars
  set_fact:
    docker_data_path: "/var/lib/docker"
    overlay2: "overlay2"
    image: "image"
    dest_file: "{{ archive }}/dockerfs.tgz"

- name: prepare archive dir
  file:
    path: "{{ archive }}"
    state: directory

- name: create dest docker directory if they don't exist
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0777'
  loop:
    - "{{ archive }}{{ docker_data_path }}/{{ overlay2 }}"

- name: register dockerfs.tgz
  stat:
    path: "{{ dest_file }}"
  register: dest_file_result

- name: copy image dir to dest docker path
  copy:
    remote_src: yes
    src: "{{ docker_data_path }}/{{ image }}"
    dest: "{{ archive }}{{ docker_data_path }}/"
    owner: root
    group: root
    mode: '0777'

- name: copy overlay2/l dir to dest docker path
  copy:
    remote_src: yes
    src: "{{ docker_data_path }}/{{ overlay2 }}/l"
    dest: "{{ archive }}{{ docker_data_path }}/{{ overlay2 }}/"
    owner: root
    group: root
    mode: '0777'

- name: list all images layers
  shell: find {{ docker_data_path }}/{{ overlay2 }}/ -mindepth 1 -maxdepth 1 ! -name l
  register: all_images_layers

- name: set vars
  set_fact:
    all_images_layers="{{ all_images_layers.stdout.split("\n")}}"

- name: generate links to all images layers 
  file:
    dest: "{{ archive }}{{ image_layer  }}"
    src: "{{ image_layer }}"
    state: link
  loop:
    "{{ all_images_layers }}"
  loop_control:
    loop_var: image_layer

- name: Compress directory var into dockerfs.tgz
  archive:
    path: "{{ archive }}/var"
    dest: "{{ dest_file }}"
  when: not dest_file_result.stat.exists

- name: Recursively remove directory
  file:
    path: "{{ archive }}/var"
    state: absent
  